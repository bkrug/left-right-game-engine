       DEF  COLRCT,COLTRG,COLHRZ

* Return true if the specified
* rectangle overlaps the other
* rectangle.
*
* R0: Address of two 8-bit numbers 
*     representing upper-left corner
*     of the sprite
* R1: Address of two 8-bit numbers
*     representing height and width
*     of the sprite
* R2: Address of two 8-bit numbers
*     representing upper-left corner
*     of the rectangle.
* R3: Address of two 8-bit numbers
*     representing height and width
*     of rectangle
SPRT   BSS  1
SPRB   BSS  1
SPRL   BSS  1
SPRR   BSS  1
RECT   BSS  1
RECB   BSS  1
RECL   BSS  1
RECR   BSS  1
COLRCT
* Let R4 contain "one" for subtraction
       LI   R4,>0100
* Let SPRL = left of sprite
* Let SPRR = right of sprite
	   MOVB *R0+,@SPRL
	   MOVB *R1+,@SPRR
	   AB   @SPRL,@SPRR
	   SB   R4,@SPRR
* Let RECL = left of rectangle
* Let RECR = right of rectangle
	   MOVB *R2+,@RECL
	   MOVB *R3+,@RECR
	   AB   @RECL,@RECR
	   SB   R4,@RECR
* Compare sprite left to rect right
       CB   @SPRL,@RECR
	   JH   COLR1
* Compare sprite right to rect left
       CB   @SPRR,@RECL
	   JL   COLR1
* Let SPRT = top of sprite
* Let SPRB = bottom of sprite
	   MOVB *R0+,@SPRT
	   MOVB *R1+,@SPRB
	   AB   @SPRT,@SPRB
	   SB   R4,@SPRB
* Let RECT = top of rectangle
* Let RECB = bottom of rectangle
       MOVB *R2+,@RECT
	   MOVB *R3+,@RECB
	   AB   @RECT,@RECB
	   SB   R4,@RECB
* Compare sprite bottom to rect top
	   CB   @SPRB,@RECT
	   JL   COLR1
* Compare sprite top to rect bottom
       CB   @SPRT,@RECB
	   JH   COLR1
* Collision detected
       SETO R4
       RT
* No collision
COLR1  CLR  R4
       RT

* Return true if the specified
* sprite overlaps the triangle.
*
* R0: Address of two 8-bit numbers 
*     representing upper-left corner
*     of the sprite
* R1: Address of two 8-bit numbers
*     representing height and width
*     of the sprite
* R2: Address of two 8-bit numbers
*     representing the Y and X coordinate
*     for the triangle's right angle
* R3: Address of two SIGNED 8-bit 
*     numbers representing length of
*     horizontal and vertical legs
*     of triangle. Positive lengths
*     imply legs extending down and
*     right from the right-angle.
COLTRG
* Let R4 contain "one" for subtraction
       LI   R4,>0100
* Let SPRL = left of sprite
* Let SPRR = right of sprite
	   MOVB *R0+,@SPRL
	   MOVB *R1+,@SPRR
	   AB   @SPRL,@SPRR
	   SB   R4,@SPRR
* Let RECL = left of triangle
	   MOVB *R2+,@RECL
* Compare sprite right to tri left
       CB   @SPRR,@RECL
	   JL   COLT1
* Let SPRT = top of sprite
* Let SPRB = bottom of sprite
	   MOVB *R0+,@SPRT
	   MOVB *R1+,@SPRB
	   AB   @SPRT,@SPRB
	   SB   R4,@SPRB
* Let RECT = top of triangle
       MOVB *R2+,@RECT
* Compare sprite bottom to tri top
	   CB   @SPRB,@RECT
	   JL   COLT1
* Offset sprite upper-left by the
* triangle's right-angle
*       SB   @RECL,@SPRL
*       SB   @RECT,@SPRT
* Let R9 = sprite top offset from
* right angle (Y)
       MOVB @RECT,R4
	   SRL  R4,8
	   MOVB @SPRT,R9
	   SRL  R9,8
	   S    R4,R9
* Let R10 = sprite left offset from
* right angle (X)
       MOVB @RECL,R4
	   SRL  R4,8
       MOVB @SPRL,R10
	   SRL  R10,8
	   S    R4,R10
* Let R4 = vertical leg length
* Let R6 = sprite X offset * R4
       MOVB *R3+,R4
	   SRL  R4,8
       MOV  R10,R5
	   MPY  R4,R5
* Let R5 = horizontal leg length
* Let R8 = sprite Y offset * R5
       MOVB *R3+,R5
	   SRL  R5,8
       MOV  R9,R7
	   MPY  R5,R7
* Let R8 = sum of the two products
       A    R6,R8
* Let R6 = product of leg lengths
       MPY  R4,R5
* Check which side of the line the 
* sprite corner is on
	   C    R8,R6
	   JGT  COLT1
* Collision detected
       SETO R4
       RT
* No collision
COLT1  CLR  R4
       RT

* Return true if the specified 
* rectangle is directly above or 
* overlaping a horizontal line
*
COLHRZ 
* Let R4 = top of sprite
* Let R5 = left of sprite
* Let R0 = height of line
	   MOVB *R0+,R4
	   MOVB *R0+,R5
	   MOVB *R2+,R0
* Compare sprite top to line height
	   CB   R4,R0
	   JH   COLH1
* Let R6 = right of sprite
* Let R1 = left of line
	   MOVB *R1,R6
	   AB   R5,R6
* TODO: If overflow, set R6 to >FFFF	   
       MOVB *R2+,R1
* Compare sprite right to line left
	   CB   R6,R1
	   JL   COLH1
* Let R2 = right of line
       MOVB *R3,R2
	   AB   R1,R2
* Compare sprite left to line right
       CB   R5,R2
       JH   COLH1	   
* Collision detected
       SETO R4
       RT
* No collision
COLH1  CLR  R4
       RT

       END